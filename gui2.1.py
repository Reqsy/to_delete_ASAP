import tkinter as tk
from tkinter import ttk, messagebox, filedialog
import os
import fitz
from unipdfconv import Unipdfconv
from PIL import Image, ImageTk
import shutil
from watcher import DirectoryWatcher

converter = Unipdfconv()
images = []
raw_images = []
selected_file = None  # –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—É—Ç–∏ –∫ –≤—ã–±—Ä–∞–Ω–Ω–æ–º—É —Ñ–∞–π–ª—É
if not os.path.exists("–î–æ–∫—É–º–µ–Ω—Ç—ã"):
    os.makedirs("–î–æ–∫—É–º–µ–Ω—Ç—ã")
os.chdir("–î–æ–∫—É–º–µ–Ω—Ç—ã")
current_directory = os.getcwd()  # –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
working_file_path = ""
In_work = False


def scan_directory(directory=None, element_id=None):
    contents = os.listdir(directory)
    contents.sort(key=lambda x: (os.path.isdir(os.path.join(current_directory, x)), x))

    # –°–æ—Ä—Ç–∏—Ä—É–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ: —Å–Ω–∞—á–∞–ª–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏, –ø–æ—Ç–æ–º —Ñ–∞–π–ª—ã
    contents.sort(key=lambda x: (os.path.isdir(os.path.join(current_directory, x)), x))

    for item in contents:
        item_path = os.path.join(current_directory, item)
        if os.path.isdir(item_path):
            # –ï—Å–ª–∏ —ç–ª–µ–º–µ–Ω—Ç —è–≤–ª—è–µ—Ç—Å—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–µ–π, –¥–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç–∫—É –∏ —Ä–µ–∫—É—Ä—Å–∏–≤–Ω–æ –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º –µ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
            content_listbox.insert(element_id + 1, f"         üìÅ {item}")
        elif item.endswith((".pdf", ".odt", ".rtf", ".docx", ".doc")):
            # –ï—Å–ª–∏ —ç–ª–µ–º–µ–Ω—Ç —è–≤–ª—è–µ—Ç—Å—è —Ñ–∞–π–ª–æ–º, –¥–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç–∫—É —Å –µ–≥–æ –∏–º–µ–Ω–µ–º
            content_listbox.insert(element_id + 1, f"         üìÑ {item}")


def show_directory_contents(directory=None):
    global current_directory

    if directory is not None:
        current_directory = directory

    # –û—á–∏—â–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Å–ø–∏—Å–∫–∞ —Ñ–∞–π–ª–æ–≤
    content_listbox.delete(0, tk.END)

    # –í—ã–≤–æ–¥–∏–º —Ç–µ–∫—É—â—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
    # content_listbox.insert(tk.END, f"–¢–µ–∫—É—â–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {current_directory}")

    # –ü–æ–ª—É—á–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ç–µ–∫—É—â–µ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
    contents = os.listdir(current_directory)

    # –°–æ—Ä—Ç–∏—Ä—É–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ: —Å–Ω–∞—á–∞–ª–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏, –ø–æ—Ç–æ–º —Ñ–∞–π–ª—ã
    contents.sort(key=lambda x: (os.path.isdir(os.path.join(current_directory, x)), x))

    for item in contents:
        item_path = os.path.join(current_directory, item)
        if os.path.isdir(item_path):
            # –ï—Å–ª–∏ —ç–ª–µ–º–µ–Ω—Ç —è–≤–ª—è–µ—Ç—Å—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–µ–π, –¥–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç–∫—É –∏ —Ä–µ–∫—É—Ä—Å–∏–≤–Ω–æ –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º –µ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
            content_listbox.insert(tk.END, f"üìÅ {item}")
        elif item.endswith((".pdf", ".odt", ".rtf", ".docx", ".doc")):
            # –ï—Å–ª–∏ —ç–ª–µ–º–µ–Ω—Ç —è–≤–ª—è–µ—Ç—Å—è —Ñ–∞–π–ª–æ–º, –¥–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç–∫—É —Å –µ–≥–æ –∏–º–µ–Ω–µ–º
            content_listbox.insert(tk.END, f"üìÑ {item}")


def close_folder(el_id):
    while content_listbox.get(el_id + 1).startswith(f"         "):
        content_listbox.delete(el_id + 1)


def user_add_file():
    file_path = filedialog.askopenfilename()
    path = os.getcwd()
    shutil.copy(file_path, os.path.join(path, os.path.basename(file_path)))
    # messagebox.showinfo("–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–∞", "–§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω")


def select_file(event):
    global selected_file
    element_id = content_listbox.curselection()[0]
    selected_file = content_listbox.get(element_id)
    if selected_file.startswith("‚ñº"):
        name = content_listbox.get(element_id)
        close_folder(element_id)
        content_listbox.delete(element_id)  # –£–¥–∞–ª—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç
        content_listbox.insert(element_id, name[1:])
    elif selected_file.startswith("üìÅ"):
        directory = selected_file.split(maxsplit=1)[1]
        name = content_listbox.get(element_id)
        content_listbox.delete(element_id)  # –£–¥–∞–ª—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç
        content_listbox.insert(element_id, "‚ñº" + name)
        scan_directory(directory, element_id)

    else:
        file_path = get_file_path_from_listbox(element_id)
        preview_file(file_path)


def preview_file(file_path):
    global images, raw_images, converter  # –û–±—ä—è–≤–ª—è–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è

    if not file_path.endswith(".pdf"):
        file_path = converter.convert_to_pdf(file_path)
        watcher.add_file_to_info(file_path)

    if os.path.isfile(file_path) and (file_path.endswith(".pdf") or file_path.endswith(".PDF")):
        # –û—Ç–∫—Ä—ã–≤–∞–µ–º PDF —Ñ–∞–π–ª
        doc = fitz.open(file_path)
        canvas.delete("all")
        # –û—á–∏—â–∞–µ–º —Å–ø–∏—Å–æ–∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
        images.clear()
        raw_images.clear()
        # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –≤—Å–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã PDF —Ñ–∞–π–ª–∞
        for page_number in range(len(doc)):
            page = doc.load_page(page_number)
            pix = page.get_pixmap()
            image = Image.frombytes("RGB", [pix.width, pix.height], pix.samples)
            raw_images.append(image)
            photo = ImageTk.PhotoImage(image)
            images.append(photo)  # –î–æ–±–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ –≤ —Å–ø–∏—Å–æ–∫

        doc.close()

        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä —Ö–æ–ª—Å—Ç–∞ –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å —Ä–∞–∑–º–µ—Ä–∞–º–∏ –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã

        # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –≤—Å–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –Ω–∞ —Ö–æ–ª—Å—Ç–µ
        y_offset = 0
        for photo in images:
            canvas.create_image(0, y_offset, anchor=tk.NW, image=photo)
            y_offset += photo.height()
        canvas.config(scrollregion=canvas.bbox("all"))
        # –ü–µ—Ä–µ–º–µ—â–∞–µ–º –ø—Ä–æ–∫—Ä—É—Ç–∫—É –≤ –Ω–∞—á–∞–ª–æ
        canvas.yview_moveto(0.0)

    else:
        print("–£–∫–∞–∑–∞–Ω–Ω—ã–π —Ñ–∞–π–ª –Ω–µ —è–≤–ª—è–µ—Ç—Å—è PDF —Ñ–∞–π–ª–æ–º –∏–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.")


def search_files(event=None):
    search_term = search_entry.get().lower()
    if search_term:
        matches = []
        for parent, dirs, files in os.walk(current_directory):
            for file in files:
                if search_term.lower() in file.lower():
                    if parent not in matches:
                        matches.append(parent)
                    matches.append(file)
        show_search_results(matches)
    else:
        show_directory_contents()


def show_search_results(matches):
    content_listbox.delete(0, tk.END)
    for item in matches:
        item_path = os.path.join(current_directory, item)
        if os.path.isdir(item_path):
            content_listbox.insert(tk.END, f"‚ñºüìÅ {os.path.split(item)[1]}")
        else:
            content_listbox.insert(tk.END, f"         üìÑ {item}")


def on_mousewheel(event):
    canvas.yview_scroll(int(-1 * (event.delta / 120)), "units")


def show_context_menu(event):
    element_id = content_listbox.curselection()[0]
    selected_file = content_listbox.get(element_id)
    if selected_file.startswith(("üìÑ", "         üìÑ")):
        context_menu.post(event.x_root, event.y_root)

    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω–¥–µ–∫—Å –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞


def on_new_file(file_path):
    global working_file_path

    def _reject():
        global In_work
        newfile_win.destroy()
        In_work = False

    def _add():
        global In_work, helper_window, working_file_path
        newfile_win.destroy()
        rename(file_path)
        root.wait_window(helper_window)
        dir_path = os.path.abspath(filedialog.askdirectory(initialdir=os.getcwd()))
        shutil.move(working_file_path, os.path.join(dir_path, os.path.basename(working_file_path)))
        watcher.add_file_to_info(os.path.join(dir_path, os.path.basename(working_file_path)))
        messagebox.showinfo("–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–∞", "–§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω")
        In_work = False
        show_directory_contents()

    newfile_win = tk.Toplevel(root)
    newfile_win.title("–ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞")
    name_label = tk.Label(newfile_win, text=f'–ù–∞–π–¥–µ–Ω –Ω–æ–≤—ã–π —Ñ–∞–π–ª {os.path.basename(file_path)}')
    name_label.pack(pady=5, padx=10, side=tk.TOP, fill=tk.X)
    name_label = tk.Label(newfile_win, text=f'–î–æ–±–∞–≤–∏—Ç—å —Ñ–∞–π–ª?')
    name_label.pack(pady=5, padx=10, side=tk.TOP, fill=tk.X)
    btn1 = tk.Button(newfile_win, text="–î–∞", command=_add)
    btn1.pack(pady=5, padx=10, side=tk.LEFT, fill=tk.X, expand=True)
    btn2 = tk.Button(newfile_win, text="–ù–µ—Ç", command=_reject)
    btn2.pack(pady=5, padx=10, side=tk.RIGHT, fill=tk.X, expand=True)


def get_file_path_from_listbox(element_id):
    name = content_listbox.get(element_id)
    if name.startswith("üìÑ"):
        path = os.path.join(os.getcwd(), name.split("üìÑ")[1][1:])
    else:
        while not content_listbox.get(element_id).startswith("‚ñº"):
            element_id += -1

        path = os.path.join(os.getcwd(), content_listbox.get(element_id)[2:][1:], name.split("üìÑ")[1][1:])

    return path


def rename_file_from_contex():
    element_id = content_listbox.curselection()[0]
    path = get_file_path_from_listbox(element_id)

    rename(path)


def rename(path_to_file):
    def _on_date_entry_change(event):
        entry_text = user_input1.get()
        if len(entry_text) == 2 or len(entry_text) == 5:
            user_input1.insert(tk.END, '.')

    def _write_to_file(name):
        global working_file_path, helper_window
        new_path_to_file = os.path.join(os.path.dirname(path_to_file), name)

        os.rename(path_to_file, new_path_to_file)
        watcher.add_file_to_info(new_path_to_file)
        working_file_path = new_path_to_file
        win.destroy()
        show_directory_contents()
        helper_window.destroy()
        messagebox.showinfo("–ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ", f'–§–∞–π–ª –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω –≤ {name}')

    pack_name = lambda: f'{combobox.get()} –æ—Ç {user_input1.get()} ‚Ññ{user_input2.get()} \'\'{user_input3.get()}\'\'{os.path.splitext(path_to_file)[1]}'

    win = tk.Toplevel(root)
    win.title("–ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞")
    options = ["–£–∫–∞–∑ –ü—Ä–µ–∑–∏–¥–µ–Ω—Ç–∞", "–ü–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–∞–≤–∏—Ç–µ–ª—å—Å—Ç–≤–∞", "–§–µ–¥–µ—Ä–∞–ª—å–Ω—ã–π –∑–∞–∫–æ–Ω"]
    combobox = ttk.Combobox(win, values=options)
    combobox.pack(pady=5, padx=10, side=tk.LEFT, fill=tk.X)

    label_input1 = tk.Label(win, text="–î–∞—Ç–∞:")
    label_input1.pack(pady=5, padx=10, side=tk.LEFT, fill=tk.X)

    # –°–æ–∑–¥–∞–µ–º –¥–≤–∞ –ø–æ–ª—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –≤–≤–æ–¥–∞
    # –°–æ–∑–¥–∞–µ–º –º–µ—Ç–∫–∏ –Ω–∞–¥ –ø–æ–ª—è–º–∏ –≤–≤–æ–¥–∞

    user_input1 = tk.Entry(win)
    user_input1.pack(pady=5, padx=10, side=tk.LEFT, fill=tk.X)
    user_input1.bind("<KeyRelease>", _on_date_entry_change)

    label_input2 = tk.Label(win, text="–ù–æ–º–µ—Ä:")
    label_input2.pack(pady=5, padx=10, side=tk.LEFT, fill=tk.X)

    # –î–æ–±–∞–≤–ª—è–µ–º —Å–∏–º–≤–æ–ª "#" –≤ –ø–æ–ª–µ –≤–≤–æ–¥–∞ –¥–ª—è "–ù–∞–∑–≤–∞–Ω–∏–µ 2"
    user_input2 = tk.Entry(win)
    user_input2.pack(pady=5, padx=10, side=tk.LEFT, fill=tk.X)

    label_input3 = tk.Label(win, text="–ù–∞–∑–≤–∞–Ω–∏–µ:")
    label_input3.pack(pady=5, padx=10, side=tk.LEFT, fill=tk.X)

    # –î–æ–±–∞–≤–ª—è–µ–º —Å–∏–º–≤–æ–ª "#" –≤ –ø–æ–ª–µ –≤–≤–æ–¥–∞ –¥–ª—è "–ù–∞–∑–≤–∞–Ω–∏–µ 2"
    user_input3 = tk.Entry(win)
    user_input3.pack(pady=5, padx=10, side=tk.LEFT, fill=tk.X)
    btn_rename_files = tk.Button(win, text="–ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞—Ç—å —Ñ–∞–π–ª", command=lambda: _write_to_file(pack_name()))
    btn_rename_files.pack(pady=5, padx=10, side=tk.TOP, anchor="ne")
    preview_file(path_to_file)


def file_routine():
    global In_work, helper_window
    if not watcher.file_q.empty() and not In_work:
        helper_window = tk.Toplevel(root)
        helper_window.withdraw()
        on_new_file(watcher.file_q.get())
        In_work = True
    root.after(1000, file_routine)


def add_dir():
    def _create():
        os.mkdir(entrydir.get())
        dir_win.destroy()
        messagebox.showinfo("–°–æ–∑–¥–∞–Ω–∏–µ –ø–∞–ø–∫–∏", f'–£—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–æ')
        show_directory_contents()

    dir_win = tk.Toplevel(root)
    labeld = tk.Label(dir_win, text="–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–∞–ø–∫–∏")
    entrydir = tk.Entry(dir_win)
    labeld.pack(pady=5, padx=10, side=tk.TOP, fill=tk.X)
    btn1 = tk.Button(dir_win, text="–°–æ–∑–¥–∞—Ç—å", command=_create)
    btn1.pack(pady=5, padx=10, side=tk.BOTTOM, fill=tk.BOTH, expand=True)
    entrydir.pack(pady=5, padx=10, side=tk.BOTTOM, fill=tk.BOTH, expand=True)


root = tk.Tk()
root.title("–ú–µ–Ω–µ–¥–∂–µ—Ä —Ñ–∞–π–ª–æ–≤")
style = ttk.Style(root)
style.theme_use("clam")  # –í—ã–±–∏—Ä–∞–µ–º —Ç–µ–º—É –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è
style.configure("Treeview", background="#f0f0f0", fieldbackground="#f0f0f0")
style.map("Treeview", background=[('selected', '#347083')])
#root.attributes("-fullscreen", True)

paned_window = ttk.PanedWindow(root, orient=tk.HORIZONTAL)
paned_window.pack(fill=tk.BOTH, expand=True)

frame1 = tk.Frame(paned_window, bg="#f0f0f0", bd=1, relief=tk.SUNKEN)
frame1.grid(row=0, column=1, rowspan=2, sticky="nsew")
canvas = tk.Canvas(frame1, bg="#f0f0f0")
scrollbar1 = tk.Scrollbar(frame1, orient="vertical", command=canvas.yview)
scrollbar1.pack(side="right", fill="y")
scrollbar2 = tk.Scrollbar(frame1, orient="horizontal", command=canvas.xview)
scrollbar2.pack(side="bottom", fill="x")

canvas.pack(pady=10, padx=10, fill=tk.BOTH, expand=True)
canvas.bind("<MouseWheel>", on_mousewheel)
canvas.config(yscrollcommand=scrollbar1.set, xscrollcommand=scrollbar2.set)

frame2 = tk.Frame(paned_window, bg="#f0f0f0", bd=1, relief=tk.SUNKEN)
frame2.grid(row=0, column=0, sticky="nsew")

content_listbox = tk.Listbox(frame2)
content_listbox.grid(row=0, column=0, columnspan=2, padx=10, pady=10, sticky="nsew")
content_listbox.bind("<Double-Button-1>", select_file)
content_listbox.bind("<Button-3>", show_context_menu)

frame2.grid_rowconfigure(0, weight=1)
frame2.grid_columnconfigure(0, weight=1

                            )
search_entry = tk.Entry(frame2, width=30)
search_entry.grid(row=1, column=1, sticky="ew")

search_entry.bind("<KeyRelease>", search_files)

search_label = tk.Label(frame2, text="–ü–æ–∏—Å–∫ —Ñ–∞–π–ª–æ–≤", bg="#57b0ff")
search_label.grid(row=1, column=0, padx=10, pady=10)
add_file_btn = tk.Button(frame2, text="–î–æ–±–∞–≤–∏—Ç—å —Ñ–∞–π–ª", command=user_add_file)
add_file_btn.grid(row=2, column=0, padx=10, pady=10, )
add_dir_btn = tk.Button(frame2, text="–î–æ–±–∞–≤–∏—Ç—å –ø–∞–ø–∫—É", command=add_dir)
add_dir_btn.grid(row=2, column=1, padx=10, pady=10, )

paned_window.add(frame2)
paned_window.add(frame1)

screen_width = root.winfo_screenwidth()
screen_height = root.winfo_screenheight()

root.geometry(f'{screen_width}x{screen_height-(int(screen_height*0.1))}+0+0')

context_menu = tk.Menu(root, tearoff=0)
context_menu.add_command(label="–ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞—Ç—å", command=rename_file_from_contex)

show_directory_contents()
helper_window = tk.Toplevel(root)
helper_window.withdraw()
filename = 'directory_listing.pkl'
watcher = DirectoryWatcher(os.getcwd())
watcher.start_watching()
file_routine()

root.mainloop()